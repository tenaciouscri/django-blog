"""
Django settings for myblog project.
Generated by 'django-admin startproject' using Django 3.2.7.
For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/
For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-2d8b9+v!a#$+#1o%&ip4t#euv_-g8kjluvla!-hnyu5_6kcd9e"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    "home/tenaciouscri/static",
    "tenaciouscri.pythonanywhere.com",
    "127.0.0.1"
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blog',
    'django_summernote',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = "myblog.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "myblog.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# Database Choice, 
# Set DATABASE = 1 for SQLite 
# Set DATABASE = 2 for Postgres 
# pip install psycopg2 to use postgres in Django

DATABASE = 1;

if DEBUG and (DATABASE == 1):
    # Use SQLite Database
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }
elif DEBUG and (DATABASE == 2):
    # Use Local Postgres Database
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            # set database name
            'NAME': 'django-blog',
            # set your user details
            'USER': 'postgres',
<<<<<<< HEAD
            'PASSWORD': '(K)odina0506',
=======
>>>>>>> 6d3452dc4c7368e38190b111630d79399caf5e12
            'HOST': 'localhost',
            'POST': '5432'
        }
    }
    
elif DEBUG and (DATABASE == 3):
    # Use Pythonanywhere's integrated MySQL Database
        DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': 'tenaciouscri$blog',
            'USER': 'tenaciouscri',
            'PASSWORD': 'mysqlroot',
            'HOST': 'tenaciouscri.mysql.pythonanywhere-services.com'
        }
    }
    
else:
    # Use Production Dtabase e.g Postgres
    # Using SQLite Database for demonstration
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Berlin"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = "/home/tenaciouscri/django-blog/myblog/blog/static/"

# Allowing to create a file called local_settings.py on the server
# that holds secret information that should only be on the server
# and should not be on GitHub

try:
    from local_settings import *
except ImportError:
    pass

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_URL='/media/'
MEDIA_ROOT= os.path.join(BASE_DIR,'media/')

X_FRAME_OPTIONS = 'SAMEORIGIN'
